//
//  DashboardViewController.swift
//  SnakeJazz
//
//  Created by Lluís Morató on 6/6/24.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum DashboardMenuOptions: CaseIterable {
    case characters
    case locations
    case episodes
    
    func displayName() -> String {
        switch self {
        case .characters:
            return String(localized: "dashboard_menu_characters")
        case .locations:
            return String(localized: "dashboard_menu_locations")
        case .episodes:
            return String(localized: "dashboard_menu_episodes")
        }
    }
}

protocol DashboardDisplayLogic: AnyObject {
}

class DashboardViewController: BaseViewController {
    @IBOutlet private weak var welcomeTitleLabel: UILabel!
    @IBOutlet private weak var welcomeSubtitleLabel: UILabel!
    @IBOutlet private weak var welcomeDisclaimerLabel: UILabel!
    
    @IBOutlet private weak var menuInformationLabel: UILabel!
    @IBOutlet private weak var menuTableView: UITableView!
    
    var interactor: DashboardBusinessLogic?
    var router: (NSObjectProtocol & DashboardRoutingLogic & DashboardDataPassing)?
    
    var menuOptions = DashboardMenuOptions.allCases
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = DashboardInteractor()
        let presenter = DashboardPresenter()
        let router = DashboardRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        setupTableView()
    }
    
    // MARK: Actions
    
    private func setupView() {
        title = String(localized: "dashboard_title")
        view.backgroundColor = Colors.background
        
        welcomeTitleLabel.font = Fonts.mainTitle
        welcomeSubtitleLabel.font = Fonts.mainSubtitle
        welcomeDisclaimerLabel.font = Fonts.disclaimer
        
        welcomeTitleLabel.attributedText = formatWelcomeTitle()
        welcomeSubtitleLabel.text = String(localized: "dashboard_welcome_subtitle")
        welcomeDisclaimerLabel.text = String(localized: "dashboard_welcome_disclaimer")
        
        menuInformationLabel.font = Fonts.defaultText
        menuInformationLabel.text = String(localized: "dashboard_menu_information")
    }
    
    private func setupTableView() {
        menuTableView.backgroundColor = Colors.clear
        menuTableView.register(DashboardMenuTableViewCell.self)
    }
    
    private func formatWelcomeTitle() -> NSAttributedString{
        let mainTitleText = String(localized: "dashboard_welcome_title")
        let mainTitleAttributedText = NSMutableAttributedString(string: mainTitleText, attributes: [.font: Fonts.mainTitle])
        
        let appNameText = String(localized: "appName")
        let appNameAttributedText = NSMutableAttributedString(string: appNameText, attributes: [.font: Fonts.standoutTitle])

        let welcomeTitleAttributedText = NSMutableAttributedString()
        welcomeTitleAttributedText.append(mainTitleAttributedText)
        welcomeTitleAttributedText.append(appNameAttributedText)
        
        return welcomeTitleAttributedText
    }
    
    // MARK: Actions
    
    @IBAction private func charactersListTouchUp() {
        router?.goToCharactersList()
    }
}

extension DashboardViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return menuOptions.count
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell: DashboardMenuTableViewCell = tableView.dequeueCell(indexPath)
        cell.setup(DashboardMenuCellModel(title: menuOptions[indexPath.row].displayName()))
        
        return cell
    }
}

extension DashboardViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        switch menuOptions[indexPath.row] {
        case .characters:
            router?.goToCharactersList()
        case .episodes:
            router?.goToEpisodesList()
        case .locations:
            router?.goToLocationsList()
        }
    }
}

extension DashboardViewController: DashboardDisplayLogic {
}
