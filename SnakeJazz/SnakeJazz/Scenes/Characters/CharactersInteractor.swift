//
//  CharactersInteractor.swift
//  SnakeJazz
//
//  Created by Lluís Morató on 6/6/24.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CharactersBusinessLogic {
    func getCharacters()
    func getNextCharacters()
}

protocol CharactersDataStore {
    //var name: String { get set }
}

class CharactersInteractor: CharactersBusinessLogic, CharactersDataStore {
    var presenter: CharactersPresentationLogic?
    
    var paginatedCharacters: PaginatedResponseModel<CharacterModel>?
    //var name: String = ""
    
    func getCharacters() {
        Client.shared.requestPaginatedCharacters { [weak self] response in
            self?.handlePaginatedCharactersResponse(response)
        }
    }
    
    func getNextCharacters() {
        guard let nextPage = paginatedCharacters?.info.next else {
            return
        }
        
        Client.shared.requestCharactersPage(nextPage) { [weak self] response in
            self?.handlePaginatedCharactersResponse(response)
        }
    }
    
    private func handlePaginatedCharactersResponse(_ response: RequestResult<PaginatedResponseModel<CharacterModel>>) {
        switch response {
        case .success(let paginatedCharacters):
            self.paginatedCharacters = paginatedCharacters
            presenter?.presentCharacters(paginatedCharacters.results, canPaginate: paginatedCharacters.info.next != nil)
        case .error(let error):
            print("")
        }
    }
}
