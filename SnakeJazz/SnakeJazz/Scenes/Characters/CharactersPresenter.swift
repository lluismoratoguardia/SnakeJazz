//
//  CharactersPresenter.swift
//  SnakeJazz
//
//  Created by Lluís Morató on 6/6/24.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CharactersPresentationLogic {
    func presentCharacters(_ characters: [CharacterModel], pagination: PaginationModel)
}

class CharactersPresenter: CharactersPresentationLogic {
    weak var viewController: CharactersDisplayLogic?
    
    func presentCharacters(_ characters: [CharacterModel], pagination: PaginationModel) {
        let displayableCharacters = characters.map({ formatCharacter($0) })
        DispatchQueue.main.async { [weak self] in
            self?.viewController?.displayCharacters(displayableCharacters, hasNextPage: pagination.next != nil, hasPreviousPage: pagination.previous != nil)
        }
    }
    
    private func formatCharacter(_ character: CharacterModel) -> CharactersViewModel.Character {
        var status: CharactersViewModel.CharacterStatus = .unknown
        switch character.status {
        case .alive:
            status = .alive
        case .dead:
            status = .dead
        case .unknown:
            status = .unknown
        }
        
        var gender: CharactersViewModel.CharacterGender = .unknown
        switch character.gender {
        case .female:
            gender = .female
        case .male:
            gender = .male
        case .genderless:
            gender = .genderless
        case .unknown:
            gender = .unknown
        }
        
        let displayableCharacter = CharactersViewModel.Character(id: character.id, name: character.name, status: status, type: character.type, gender: gender, origin: character.origin.name, lastLocation: character.location.name, image: character.image)
        
        return displayableCharacter
    }
}
